{
  "api/ProjectDawn.CozyBuilder.BondOrentation.html": {
    "href": "api/ProjectDawn.CozyBuilder.BondOrentation.html",
    "title": "Enum BondOrentation",
    "keywords": "Enum BondOrentation Namespace: ProjectDawn.CozyBuilder Assembly: ProjectDawn.CozyBuilder.dll Syntax public enum BondOrentation Fields Name Description Horizontal Vertical"
  },
  "api/ProjectDawn.CozyBuilder.Cell.html": {
    "href": "api/ProjectDawn.CozyBuilder.Cell.html",
    "title": "Struct Cell",
    "keywords": "Struct Cell Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.CozyBuilder Assembly: ProjectDawn.CozyBuilder.dll Syntax public struct Cell Constructors Cell(Rect, int, int) Declaration public Cell(Rect rect, int row, int column) Parameters Type Name Description Rect rect int row int column Cell(Rect, float, float, int, int) Declaration public Cell(Rect rect, float z, float depth, int row, int column) Parameters Type Name Description Rect rect float z float depth int row int column Fields Border Declaration public float4 Border Field Value Type Description float4 Column Declaration public int Column Field Value Type Description int Depth Declaration public float Depth Field Value Type Description float Rect Declaration public Rect Rect Field Value Type Description Rect Rotation Declaration public quaternion Rotation Field Value Type Description quaternion Row Declaration public int Row Field Value Type Description int UseRotation Declaration public bool UseRotation Field Value Type Description bool Z Declaration public float Z Field Value Type Description float Methods Copy(Rect) Declaration public Cell Copy(Rect rect) Parameters Type Name Description Rect rect Returns Type Description Cell"
  },
  "api/ProjectDawn.CozyBuilder.CozyArtifact.html": {
    "href": "api/ProjectDawn.CozyBuilder.CozyArtifact.html",
    "title": "Class CozyArtifact",
    "keywords": "Class CozyArtifact Inheritance object CozyArtifact Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.CozyBuilder Assembly: ProjectDawn.CozyBuilder.dll Syntax public class CozyArtifact Fields GameObjects Declaration public List<GameObject> GameObjects Field Value Type Description List<GameObject> Hash Declaration public uint Hash Field Value Type Description uint Nodes Declaration public List<CozyRenderNode> Nodes Field Value Type Description List<CozyRenderNode> Version Declaration public ulong Version Field Value Type Description ulong"
  },
  "api/ProjectDawn.CozyBuilder.CozyAttachment.html": {
    "href": "api/ProjectDawn.CozyBuilder.CozyAttachment.html",
    "title": "Class CozyAttachment",
    "keywords": "Class CozyAttachment Inheritance object Object Component Behaviour MonoBehaviour CozyAttachment Implements ICozyBuilder ICozyHashable Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.CozyBuilder Assembly: ProjectDawn.CozyBuilder.dll Syntax [AddComponentMenu(\"Cozy Builder/Builder/Cozy Attachment\")] public class CozyAttachment : MonoBehaviour, ICozyBuilder, ICozyHashable Fields Offset Declaration public float3 Offset Field Value Type Description float3 Prefab Declaration public GameObject Prefab Field Value Type Description GameObject Size Declaration public float2 Size Field Value Type Description float2 Methods Build(ref CozyBuilderContext) Declaration public void Build(ref CozyBuilderContext context) Parameters Type Name Description CozyBuilderContext context CalculateHash() Declaration public uint CalculateHash() Returns Type Description uint Implements ICozyBuilder ICozyHashable Extension Methods GameObjectExt.GetComponentsInChildrenScoped<T>(MonoBehaviour, bool) GameObjectExt.GetComponentsScoped<T>(MonoBehaviour, bool)"
  },
  "api/ProjectDawn.CozyBuilder.CozyBuildMode.html": {
    "href": "api/ProjectDawn.CozyBuilder.CozyBuildMode.html",
    "title": "Enum CozyBuildMode",
    "keywords": "Enum CozyBuildMode Namespace: ProjectDawn.CozyBuilder Assembly: ProjectDawn.CozyBuilder.dll Syntax public enum CozyBuildMode Fields Name Description Always Never"
  },
  "api/ProjectDawn.CozyBuilder.CozyBuilderContext.html": {
    "href": "api/ProjectDawn.CozyBuilder.CozyBuilderContext.html",
    "title": "Struct CozyBuilderContext",
    "keywords": "Struct CozyBuilderContext Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.CozyBuilder Assembly: ProjectDawn.CozyBuilder.dll Syntax public struct CozyBuilderContext Methods Instantiate(GameObject, float3, quaternion, float3, Material) Declaration public void Instantiate(GameObject prefab, float3 position, quaternion rotation, float3 scale, Material overrideMaterial = null) Parameters Type Name Description GameObject prefab float3 position quaternion rotation float3 scale Material overrideMaterial Instantiate(Material, Mesh, float3, quaternion) Declaration public void Instantiate(Material material, Mesh mesh, float3 position, quaternion rotation) Parameters Type Name Description Material material Mesh mesh float3 position quaternion rotation"
  },
  "api/ProjectDawn.CozyBuilder.CozyCrenelles.html": {
    "href": "api/ProjectDawn.CozyBuilder.CozyCrenelles.html",
    "title": "Class CozyCrenelles",
    "keywords": "Class CozyCrenelles Inheritance object Object Component Behaviour MonoBehaviour CozyCrenelles Implements ICozyGridModifier ICozyHashable Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.CozyBuilder Assembly: ProjectDawn.CozyBuilder.dll Syntax [AddComponentMenu(\"Cozy Builder/Modifier/Cozy Crenelles\")] public class CozyCrenelles : MonoBehaviour, ICozyGridModifier, ICozyHashable Fields Frequency Declaration [Range(2, 20)] public int Frequency Field Value Type Description int Invert Declaration public bool Invert Field Value Type Description bool Row Declaration public int Row Field Value Type Description int Methods CalculateHash() Declaration public uint CalculateHash() Returns Type Description uint Modify(ref CozyBuilderContext, NativeList<Cell>, CozyPlane) Declaration public void Modify(ref CozyBuilderContext context, NativeList<Cell> cells, CozyPlane plane) Parameters Type Name Description CozyBuilderContext context NativeList<Cell> cells CozyPlane plane Implements ICozyGridModifier ICozyHashable Extension Methods GameObjectExt.GetComponentsInChildrenScoped<T>(MonoBehaviour, bool) GameObjectExt.GetComponentsScoped<T>(MonoBehaviour, bool)"
  },
  "api/ProjectDawn.CozyBuilder.CozyCut.html": {
    "href": "api/ProjectDawn.CozyBuilder.CozyCut.html",
    "title": "Class CozyCut",
    "keywords": "Class CozyCut Inheritance object Object Component Behaviour MonoBehaviour CozyCut Implements ICozyGridModifier ICozyHashable Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.CozyBuilder Assembly: ProjectDawn.CozyBuilder.dll Syntax [AddComponentMenu(\"Cozy Builder/Modifier/Cozy Cut\")] public class CozyCut : MonoBehaviour, ICozyGridModifier, ICozyHashable Methods CalculateHash() Declaration public uint CalculateHash() Returns Type Description uint Cut(Rect, NativeList<Cell>) Declaration public static void Cut(Rect cut, NativeList<Cell> cells) Parameters Type Name Description Rect cut NativeList<Cell> cells Modify(ref CozyBuilderContext, NativeList<Cell>, CozyPlane) Declaration public void Modify(ref CozyBuilderContext context, NativeList<Cell> cells, CozyPlane plane) Parameters Type Name Description CozyBuilderContext context NativeList<Cell> cells CozyPlane plane Implements ICozyGridModifier ICozyHashable Extension Methods GameObjectExt.GetComponentsInChildrenScoped<T>(MonoBehaviour, bool) GameObjectExt.GetComponentsScoped<T>(MonoBehaviour, bool)"
  },
  "api/ProjectDawn.CozyBuilder.CozyDoubleLapTilling.html": {
    "href": "api/ProjectDawn.CozyBuilder.CozyDoubleLapTilling.html",
    "title": "Class CozyDoubleLapTilling",
    "keywords": "Class CozyDoubleLapTilling Rearranges cell widths to create a brick-like pattern and occasionally splits bricks. Inheritance object Object Component Behaviour MonoBehaviour CozyDoubleLapTilling Implements ICozyGridModifier ICozyHashable Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.CozyBuilder Assembly: ProjectDawn.CozyBuilder.dll Syntax [AddComponentMenu(\"Cozy Builder/Modifier/Cozy Double Lap Tilling\")] public class CozyDoubleLapTilling : MonoBehaviour, ICozyGridModifier, ICozyHashable Fields DepthScale Rearranges cell widths to create a brick-like pattern and occasionally splits bricks. Declaration [MinMaxRange(0, 2)] public Range DepthScale Field Value Type Description Range HeightScale Rearranges cell widths to create a brick-like pattern and occasionally splits bricks. Declaration [MinMaxRange(0, 2)] public Range HeightScale Field Value Type Description Range Seed Rearranges cell widths to create a brick-like pattern and occasionally splits bricks. Declaration public uint Seed Field Value Type Description uint WidthScale Rearranges cell widths to create a brick-like pattern and occasionally splits bricks. Declaration [MinMaxRange(0, 2)] public Range WidthScale Field Value Type Description Range Methods CalculateHash() Rearranges cell widths to create a brick-like pattern and occasionally splits bricks. Declaration public uint CalculateHash() Returns Type Description uint Modify(ref CozyBuilderContext, NativeList<Cell>, CozyPlane) Rearranges cell widths to create a brick-like pattern and occasionally splits bricks. Declaration public void Modify(ref CozyBuilderContext context, NativeList<Cell> cells, CozyPlane plane) Parameters Type Name Description CozyBuilderContext context NativeList<Cell> cells CozyPlane plane Implements ICozyGridModifier ICozyHashable Extension Methods GameObjectExt.GetComponentsInChildrenScoped<T>(MonoBehaviour, bool) GameObjectExt.GetComponentsScoped<T>(MonoBehaviour, bool)"
  },
  "api/ProjectDawn.CozyBuilder.CozyDraw.html": {
    "href": "api/ProjectDawn.CozyBuilder.CozyDraw.html",
    "title": "Class CozyDraw",
    "keywords": "Class CozyDraw Inheritance object Object Component Behaviour MonoBehaviour CozyDraw Implements ICozyGridModifier ICozySegmentsModifier ICozyHashable Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.CozyBuilder Assembly: ProjectDawn.CozyBuilder.dll Syntax [AddComponentMenu(\"Cozy Builder/Modifier/Cozy Draw\")] public class CozyDraw : MonoBehaviour, ICozyGridModifier, ICozySegmentsModifier, ICozyHashable Fields CellSize Declaration [FormerlySerializedAs(\"MinPerimeter\")] public float3 CellSize Field Value Type Description float3 DepthScaling Declaration public Scaling DepthScaling Field Value Type Description Scaling GlobalRotation Declaration public bool GlobalRotation Field Value Type Description bool HeightScaling Declaration public Scaling HeightScaling Field Value Type Description Scaling MinArea Declaration public float MinArea Field Value Type Description float OverrideMaterial Declaration public Material OverrideMaterial Field Value Type Description Material Prefabs Declaration public List<GameObject> Prefabs Field Value Type Description List<GameObject> Rotation Declaration public float3 Rotation Field Value Type Description float3 Seed Declaration public uint Seed Field Value Type Description uint WidthScaling Declaration public Scaling WidthScaling Field Value Type Description Scaling Methods CalculateHash() Declaration public uint CalculateHash() Returns Type Description uint Modify(ref CozyBuilderContext, NativeList<Cell>, CozyPlane) Declaration public void Modify(ref CozyBuilderContext context, NativeList<Cell> cells, CozyPlane plane) Parameters Type Name Description CozyBuilderContext context NativeList<Cell> cells CozyPlane plane Modify(ref CozyBuilderContext, NativeList<Segment>, CozySpline) Declaration public void Modify(ref CozyBuilderContext context, NativeList<Segment> segments, CozySpline spline) Parameters Type Name Description CozyBuilderContext context NativeList<Segment> segments CozySpline spline Implements ICozyGridModifier ICozySegmentsModifier ICozyHashable Extension Methods GameObjectExt.GetComponentsInChildrenScoped<T>(MonoBehaviour, bool) GameObjectExt.GetComponentsScoped<T>(MonoBehaviour, bool)"
  },
  "api/ProjectDawn.CozyBuilder.CozyGrid.html": {
    "href": "api/ProjectDawn.CozyBuilder.CozyGrid.html",
    "title": "Class CozyGrid",
    "keywords": "Class CozyGrid Inheritance object Object Component Behaviour MonoBehaviour CozyGrid Implements ICozyBuilder ICozyHashable Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.CozyBuilder Assembly: ProjectDawn.CozyBuilder.dll Syntax [AddComponentMenu(\"Cozy Builder/Builder/Cozy Grid\")] public class CozyGrid : MonoBehaviour, ICozyBuilder, ICozyHashable Fields CellSize Declaration [FormerlySerializedAs(\"MinPerimeter\")] public float3 CellSize Field Value Type Description float3 CenterV Declaration [Range(0, 1)] public float CenterV Field Value Type Description float Methods CalculateHash() Declaration public uint CalculateHash() Returns Type Description uint Implements ICozyBuilder ICozyHashable Extension Methods GameObjectExt.GetComponentsInChildrenScoped<T>(MonoBehaviour, bool) GameObjectExt.GetComponentsScoped<T>(MonoBehaviour, bool)"
  },
  "api/ProjectDawn.CozyBuilder.CozyMask.html": {
    "href": "api/ProjectDawn.CozyBuilder.CozyMask.html",
    "title": "Class CozyMask",
    "keywords": "Class CozyMask Inheritance object Object Component Behaviour MonoBehaviour CozyMask Implements ICozyHashable Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.CozyBuilder Assembly: ProjectDawn.CozyBuilder.dll Syntax [AddComponentMenu(\"Cozy Builder/Cozy Mask\")] public class CozyMask : MonoBehaviour, ICozyHashable Fields Offset Declaration public float3 Offset Field Value Type Description float3 Size Declaration public float2 Size Field Value Type Description float2 Methods CalculateHash() Declaration public uint CalculateHash() Returns Type Description uint Implements ICozyHashable Extension Methods GameObjectExt.GetComponentsInChildrenScoped<T>(MonoBehaviour, bool) GameObjectExt.GetComponentsScoped<T>(MonoBehaviour, bool)"
  },
  "api/ProjectDawn.CozyBuilder.CozyPlane.html": {
    "href": "api/ProjectDawn.CozyBuilder.CozyPlane.html",
    "title": "Class CozyPlane",
    "keywords": "Class CozyPlane Inheritance object Object Component Behaviour MonoBehaviour CozyPlane Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.CozyBuilder Assembly: ProjectDawn.CozyBuilder.dll Syntax [AddComponentMenu(\"Cozy Builder/Geometry/Cozy Plane\")] public class CozyPlane : MonoBehaviour Fields SplineA Declaration public CozySpline SplineA Field Value Type Description CozySpline SplineB Declaration public CozySpline SplineB Field Value Type Description CozySpline Properties IsValid Declaration public bool IsValid { get; } Property Value Type Description bool Position Declaration public float3 Position { get; set; } Property Value Type Description float3 Methods CalculateColumnLength(float) Declaration public float CalculateColumnLength(float u) Parameters Type Name Description float u Returns Type Description float CalculateHash() Declaration public uint CalculateHash() Returns Type Description uint CalculateRowLength() Declaration public float CalculateRowLength() Returns Type Description float GetRect(float3, float2) Declaration public Rect GetRect(float3 point, float2 size) Parameters Type Name Description float3 point float2 size Returns Type Description Rect GetUv(float3) Declaration public float2 GetUv(float3 point) Parameters Type Name Description float3 point Returns Type Description float2 SamplePlane(float2) Declaration public float3 SamplePlane(float2 uv) Parameters Type Name Description float2 uv Returns Type Description float3 Extension Methods GameObjectExt.GetComponentsInChildrenScoped<T>(MonoBehaviour, bool) GameObjectExt.GetComponentsScoped<T>(MonoBehaviour, bool)"
  },
  "api/ProjectDawn.CozyBuilder.CozyPoint.html": {
    "href": "api/ProjectDawn.CozyBuilder.CozyPoint.html",
    "title": "Class CozyPoint",
    "keywords": "Class CozyPoint Inheritance object Object Component Behaviour MonoBehaviour CozyPoint Implements ICozyHashable Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.CozyBuilder Assembly: ProjectDawn.CozyBuilder.dll Syntax [AddComponentMenu(\"Cozy Builder/Geometry/Cozy Point\")] public class CozyPoint : MonoBehaviour, ICozyHashable Properties Position Declaration public float3 Position { get; set; } Property Value Type Description float3 Methods CalculateHash() Declaration public uint CalculateHash() Returns Type Description uint Implements ICozyHashable Extension Methods GameObjectExt.GetComponentsInChildrenScoped<T>(MonoBehaviour, bool) GameObjectExt.GetComponentsScoped<T>(MonoBehaviour, bool)"
  },
  "api/ProjectDawn.CozyBuilder.CozyQuoin.html": {
    "href": "api/ProjectDawn.CozyBuilder.CozyQuoin.html",
    "title": "Class CozyQuoin",
    "keywords": "Class CozyQuoin Inheritance object Object Component Behaviour MonoBehaviour CozyQuoin Implements ICozyGridModifier ICozyHashable Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.CozyBuilder Assembly: ProjectDawn.CozyBuilder.dll Syntax [AddComponentMenu(\"Cozy Builder/Modifier/Cozy Quoin\")] public class CozyQuoin : MonoBehaviour, ICozyGridModifier, ICozyHashable Fields CornerAngle Declaration [MinMaxRange(0, 180)] public Range CornerAngle Field Value Type Description Range Depth Declaration public float Depth Field Value Type Description float Height Declaration public float Height Field Value Type Description float Mirror Declaration public bool Mirror Field Value Type Description bool Width Declaration public float Width Field Value Type Description float Methods CalculateHash() Declaration public uint CalculateHash() Returns Type Description uint Modify(ref CozyBuilderContext, NativeList<Cell>, CozyPlane) Declaration public void Modify(ref CozyBuilderContext context, NativeList<Cell> cells, CozyPlane plane) Parameters Type Name Description CozyBuilderContext context NativeList<Cell> cells CozyPlane plane Implements ICozyGridModifier ICozyHashable Extension Methods GameObjectExt.GetComponentsInChildrenScoped<T>(MonoBehaviour, bool) GameObjectExt.GetComponentsScoped<T>(MonoBehaviour, bool)"
  },
  "api/ProjectDawn.CozyBuilder.CozyRenderMode.html": {
    "href": "api/ProjectDawn.CozyBuilder.CozyRenderMode.html",
    "title": "Enum CozyRenderMode",
    "keywords": "Enum CozyRenderMode Namespace: ProjectDawn.CozyBuilder Assembly: ProjectDawn.CozyBuilder.dll Syntax public enum CozyRenderMode Fields Name Description GameObjects ProceduralDraw"
  },
  "api/ProjectDawn.CozyBuilder.CozyRenderNode.html": {
    "href": "api/ProjectDawn.CozyBuilder.CozyRenderNode.html",
    "title": "Struct CozyRenderNode",
    "keywords": "Struct CozyRenderNode Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.CozyBuilder Assembly: ProjectDawn.CozyBuilder.dll Syntax public struct CozyRenderNode Fields Material Declaration public Material Material Field Value Type Description Material Mesh Declaration public Mesh Mesh Field Value Type Description Mesh Transform Declaration public float4x4 Transform Field Value Type Description float4x4"
  },
  "api/ProjectDawn.CozyBuilder.CozyRenderNodeBatchComparer.html": {
    "href": "api/ProjectDawn.CozyBuilder.CozyRenderNodeBatchComparer.html",
    "title": "Struct CozyRenderNodeBatchComparer",
    "keywords": "Struct CozyRenderNodeBatchComparer Implements IComparer<CozyRenderNode> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.CozyBuilder Assembly: ProjectDawn.CozyBuilder.dll Syntax public struct CozyRenderNodeBatchComparer : IComparer<CozyRenderNode> Methods Compare(CozyRenderNode, CozyRenderNode) Declaration public int Compare(CozyRenderNode x, CozyRenderNode y) Parameters Type Name Description CozyRenderNode x CozyRenderNode y Returns Type Description int Implements IComparer<T>"
  },
  "api/ProjectDawn.CozyBuilder.CozyRenderer.html": {
    "href": "api/ProjectDawn.CozyBuilder.CozyRenderer.html",
    "title": "Class CozyRenderer",
    "keywords": "Class CozyRenderer Inheritance object Object Component Behaviour MonoBehaviour CozyRenderer Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.CozyBuilder Assembly: ProjectDawn.CozyBuilder.dll Syntax [AddComponentMenu(\"Cozy Builder/Cozy Renderer\")] [ExecuteAlways] public class CozyRenderer : MonoBehaviour Fields BuildMode Declaration public CozyBuildMode BuildMode Field Value Type Description CozyBuildMode Methods Build() Declaration public void Build() Clear() Declaration public void Clear() Extension Methods GameObjectExt.GetComponentsInChildrenScoped<T>(MonoBehaviour, bool) GameObjectExt.GetComponentsScoped<T>(MonoBehaviour, bool)"
  },
  "api/ProjectDawn.CozyBuilder.CozyRunningBond.html": {
    "href": "api/ProjectDawn.CozyBuilder.CozyRunningBond.html",
    "title": "Class CozyRunningBond",
    "keywords": "Class CozyRunningBond Inheritance object Object Component Behaviour MonoBehaviour CozyRunningBond Implements ICozyGridModifier ICozyHashable Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.CozyBuilder Assembly: ProjectDawn.CozyBuilder.dll Syntax [AddComponentMenu(\"Cozy Builder/Modifier/Cozy Running Bond\")] public class CozyRunningBond : MonoBehaviour, ICozyGridModifier, ICozyHashable Fields DepthScale Declaration [MinMaxRange(0, 2)] public Range DepthScale Field Value Type Description Range MinHeight Declaration public float MinHeight Field Value Type Description float Orentation Declaration public BondOrentation Orentation Field Value Type Description BondOrentation Seed Declaration public uint Seed Field Value Type Description uint WidthScale Declaration [MinMaxRange(0, 2)] public Range WidthScale Field Value Type Description Range Methods CalculateHash() Declaration public uint CalculateHash() Returns Type Description uint Modify(ref CozyBuilderContext, NativeList<Cell>, CozyPlane) Declaration public void Modify(ref CozyBuilderContext context, NativeList<Cell> cells, CozyPlane plane) Parameters Type Name Description CozyBuilderContext context NativeList<Cell> cells CozyPlane plane Implements ICozyGridModifier ICozyHashable Extension Methods GameObjectExt.GetComponentsInChildrenScoped<T>(MonoBehaviour, bool) GameObjectExt.GetComponentsScoped<T>(MonoBehaviour, bool)"
  },
  "api/ProjectDawn.CozyBuilder.CozySegments.html": {
    "href": "api/ProjectDawn.CozyBuilder.CozySegments.html",
    "title": "Class CozySegments",
    "keywords": "Class CozySegments Inheritance object Object Component Behaviour MonoBehaviour CozySegments Implements ICozyBuilder ICozyHashable Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.CozyBuilder Assembly: ProjectDawn.CozyBuilder.dll Syntax [AddComponentMenu(\"Cozy Builder/Builder/Cozy Segments\")] public class CozySegments : MonoBehaviour, ICozyBuilder, ICozyHashable Fields Spacing Declaration public float Spacing Field Value Type Description float Implements ICozyBuilder ICozyHashable Extension Methods GameObjectExt.GetComponentsInChildrenScoped<T>(MonoBehaviour, bool) GameObjectExt.GetComponentsScoped<T>(MonoBehaviour, bool)"
  },
  "api/ProjectDawn.CozyBuilder.CozySpline.html": {
    "href": "api/ProjectDawn.CozyBuilder.CozySpline.html",
    "title": "Class CozySpline",
    "keywords": "Class CozySpline Inheritance object Object Component Behaviour MonoBehaviour CozySpline Implements ICozyBuilder ICozyHashable Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.CozyBuilder Assembly: ProjectDawn.CozyBuilder.dll Syntax [AddComponentMenu(\"Cozy Builder/Geometry/Cozy Spline\")] public class CozySpline : MonoBehaviour, ICozyBuilder, ICozyHashable Fields Detail Declaration public int Detail Field Value Type Description int Topology Declaration public SplineTopology Topology Field Value Type Description SplineTopology Properties IsCreated Declaration public bool IsCreated { get; } Property Value Type Description bool IsValid Declaration public bool IsValid { get; } Property Value Type Description bool Points Declaration public List<CozyPoint> Points { get; } Property Value Type Description List<CozyPoint> Position Declaration public float3 Position { get; set; } Property Value Type Description float3 Methods Build(ref CozyBuilderContext) Declaration public void Build(ref CozyBuilderContext context) Parameters Type Name Description CozyBuilderContext context CalculateHash() Declaration public uint CalculateHash() Returns Type Description uint CalculateLength() Declaration public float CalculateLength() Returns Type Description float CatmullRom(float3, float3, float3, float3, float) Declaration public static float3 CatmullRom(float3 p0, float3 p1, float3 p2, float3 p3, float t) Parameters Type Name Description float3 p0 float3 p1 float3 p2 float3 p3 float t Returns Type Description float3 ClosestTOnLine(float3, float3, float3) Declaration public static float ClosestTOnLine(float3 from, float3 to, float3 point) Parameters Type Name Description float3 from float3 to float3 point Returns Type Description float GetLength(float) Declaration public float GetLength(float t) Parameters Type Name Description float t Returns Type Description float GetPointTAtIndex(int) Declaration public float GetPointTAtIndex(int index) Parameters Type Name Description int index Returns Type Description float GetRawT(float) Declaration public float GetRawT(float length) Parameters Type Name Description float length Returns Type Description float GetRawT(float3) Declaration public float GetRawT(float3 point) Parameters Type Name Description float3 point Returns Type Description float SampleSpline(float) Declaration public float3 SampleSpline(float t) Parameters Type Name Description float t Returns Type Description float3 SampleSplineWithRawT(float) Declaration public float3 SampleSplineWithRawT(float t) Parameters Type Name Description float t Returns Type Description float3 Implements ICozyBuilder ICozyHashable Extension Methods GameObjectExt.GetComponentsInChildrenScoped<T>(MonoBehaviour, bool) GameObjectExt.GetComponentsScoped<T>(MonoBehaviour, bool)"
  },
  "api/ProjectDawn.CozyBuilder.CozyStringCourses.html": {
    "href": "api/ProjectDawn.CozyBuilder.CozyStringCourses.html",
    "title": "Class CozyStringCourses",
    "keywords": "Class CozyStringCourses Inheritance object Object Component Behaviour MonoBehaviour CozyStringCourses Implements ICozyGridModifier ICozyHashable Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.CozyBuilder Assembly: ProjectDawn.CozyBuilder.dll Syntax [AddComponentMenu(\"Cozy Builder/Modifier/Cozy String Courses\")] public class CozyStringCourses : MonoBehaviour, ICozyGridModifier, ICozyHashable Fields CellSize Declaration [FormerlySerializedAs(\"MinPerimeter\")] public float3 CellSize Field Value Type Description float3 Spacing Declaration public float Spacing Field Value Type Description float Methods CalculateHash() Declaration public uint CalculateHash() Returns Type Description uint Modify(ref CozyBuilderContext, NativeList<Cell>, CozyPlane) Declaration public void Modify(ref CozyBuilderContext context, NativeList<Cell> cells, CozyPlane plane) Parameters Type Name Description CozyBuilderContext context NativeList<Cell> cells CozyPlane plane Implements ICozyGridModifier ICozyHashable Extension Methods GameObjectExt.GetComponentsInChildrenScoped<T>(MonoBehaviour, bool) GameObjectExt.GetComponentsScoped<T>(MonoBehaviour, bool)"
  },
  "api/ProjectDawn.CozyBuilder.Editor.CozyOverlay.html": {
    "href": "api/ProjectDawn.CozyBuilder.Editor.CozyOverlay.html",
    "title": "Class CozyOverlay",
    "keywords": "Class CozyOverlay Inheritance object Overlay ToolbarOverlay CozyOverlay Implements ICreateToolbar Inherited Members ToolbarOverlay.CreateHorizontalToolbarContent() ToolbarOverlay.CreateVerticalToolbarContent() ToolbarOverlay.CreatePanelContent() ToolbarOverlay.toolbarElements Overlay.ussClassName Overlay.CreateContent(Layout) Overlay.OnCreated() Overlay.OnWillBeDestroyed() Overlay.Close() Overlay.Undock() Overlay.containerWindow Overlay.id Overlay.collapsedIcon Overlay.layout Overlay.collapsed Overlay.displayName Overlay.displayed Overlay.isInToolbar Overlay.size Overlay.minSize Overlay.maxSize Overlay.floatingPosition Overlay.floating Overlay.layoutChanged Overlay.collapsedChanged Overlay.displayedChanged Overlay.floatingChanged Overlay.floatingPositionChanged object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.CozyBuilder.Editor Assembly: ProjectDawn.CozyBuilder.Editor.dll Syntax [Overlay(typeof(SceneView), \"Cozy Tools\", false)] [Icon(\"Assets/PlacementToolsIcon.png\")] public class CozyOverlay : ToolbarOverlay, ICreateToolbar Implements UnityEditor.Overlays.ICreateToolbar"
  },
  "api/ProjectDawn.CozyBuilder.Editor.CozyRendererGizmos.html": {
    "href": "api/ProjectDawn.CozyBuilder.Editor.CozyRendererGizmos.html",
    "title": "Class CozyRendererGizmos",
    "keywords": "Class CozyRendererGizmos Inheritance object CozyRendererGizmos Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.CozyBuilder.Editor Assembly: ProjectDawn.CozyBuilder.Editor.dll Syntax public class CozyRendererGizmos"
  },
  "api/ProjectDawn.CozyBuilder.Editor.html": {
    "href": "api/ProjectDawn.CozyBuilder.Editor.html",
    "title": "Namespace ProjectDawn.CozyBuilder.Editor",
    "keywords": "Namespace ProjectDawn.CozyBuilder.Editor Classes CozyOverlay CozyRendererGizmos"
  },
  "api/ProjectDawn.CozyBuilder.GameObjectExt.ComponentScope-1.html": {
    "href": "api/ProjectDawn.CozyBuilder.GameObjectExt.ComponentScope-1.html",
    "title": "Struct GameObjectExt.ComponentScope<T>",
    "keywords": "Struct GameObjectExt.ComponentScope<T> Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.CozyBuilder Assembly: ProjectDawn.CozyBuilder.dll Syntax public struct GameObjectExt.ComponentScope<T> : IDisposable Type Parameters Name Description T Fields List Declaration public List<T> List Field Value Type Description List<T> Methods Dispose() Declaration public void Dispose() Operators implicit operator List<T>(ComponentScope<T>) Declaration public static implicit operator List<T>(GameObjectExt.ComponentScope<T> data) Parameters Type Name Description GameObjectExt.ComponentScope<T> data Returns Type Description List<T> Implements IDisposable"
  },
  "api/ProjectDawn.CozyBuilder.GameObjectExt.html": {
    "href": "api/ProjectDawn.CozyBuilder.GameObjectExt.html",
    "title": "Class GameObjectExt",
    "keywords": "Class GameObjectExt Inheritance object GameObjectExt Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.CozyBuilder Assembly: ProjectDawn.CozyBuilder.dll Syntax public static class GameObjectExt Methods GetComponentsInChildrenScoped<T>(MonoBehaviour, bool) Declaration public static GameObjectExt.ComponentScope<T> GetComponentsInChildrenScoped<T>(this MonoBehaviour gameObject, bool includeInactive = false) Parameters Type Name Description MonoBehaviour gameObject bool includeInactive Returns Type Description GameObjectExt.ComponentScope<T> Type Parameters Name Description T GetComponentsInChildrenScoped<T>(Transform, bool) Declaration public static GameObjectExt.ComponentScope<T> GetComponentsInChildrenScoped<T>(this Transform gameObject, bool includeInactive = false) Parameters Type Name Description Transform gameObject bool includeInactive Returns Type Description GameObjectExt.ComponentScope<T> Type Parameters Name Description T GetComponentsScoped<T>(MonoBehaviour, bool) Declaration public static GameObjectExt.ComponentScope<T> GetComponentsScoped<T>(this MonoBehaviour gameObject, bool includeInactive = false) Parameters Type Name Description MonoBehaviour gameObject bool includeInactive Returns Type Description GameObjectExt.ComponentScope<T> Type Parameters Name Description T GetComponentsScoped<T>(Transform, bool) Declaration public static GameObjectExt.ComponentScope<T> GetComponentsScoped<T>(this Transform gameObject, bool includeInactive = false) Parameters Type Name Description Transform gameObject bool includeInactive Returns Type Description GameObjectExt.ComponentScope<T> Type Parameters Name Description T"
  },
  "api/ProjectDawn.CozyBuilder.HashBuffer.html": {
    "href": "api/ProjectDawn.CozyBuilder.HashBuffer.html",
    "title": "Struct HashBuffer",
    "keywords": "Struct HashBuffer Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.CozyBuilder Assembly: ProjectDawn.CozyBuilder.dll Syntax public ref struct HashBuffer Methods GetHash() Declaration public uint GetHash() Returns Type Description uint Write<T>(T) Declaration public void Write<T>(T value) where T : unmanaged Parameters Type Name Description T value Type Parameters Name Description T"
  },
  "api/ProjectDawn.CozyBuilder.ICozyBuilder.html": {
    "href": "api/ProjectDawn.CozyBuilder.ICozyBuilder.html",
    "title": "Interface ICozyBuilder",
    "keywords": "Interface ICozyBuilder Inherited Members ICozyHashable.CalculateHash() Namespace: ProjectDawn.CozyBuilder Assembly: ProjectDawn.CozyBuilder.dll Syntax public interface ICozyBuilder : ICozyHashable Methods Build(ref CozyBuilderContext) Declaration void Build(ref CozyBuilderContext context) Parameters Type Name Description CozyBuilderContext context"
  },
  "api/ProjectDawn.CozyBuilder.ICozyGridModifier.html": {
    "href": "api/ProjectDawn.CozyBuilder.ICozyGridModifier.html",
    "title": "Interface ICozyGridModifier",
    "keywords": "Interface ICozyGridModifier Inherited Members ICozyHashable.CalculateHash() Namespace: ProjectDawn.CozyBuilder Assembly: ProjectDawn.CozyBuilder.dll Syntax public interface ICozyGridModifier : ICozyHashable Methods Modify(ref CozyBuilderContext, NativeList<Cell>, CozyPlane) Declaration void Modify(ref CozyBuilderContext context, NativeList<Cell> cells, CozyPlane plane) Parameters Type Name Description CozyBuilderContext context NativeList<Cell> cells CozyPlane plane"
  },
  "api/ProjectDawn.CozyBuilder.ICozyHashable.html": {
    "href": "api/ProjectDawn.CozyBuilder.ICozyHashable.html",
    "title": "Interface ICozyHashable",
    "keywords": "Interface ICozyHashable Namespace: ProjectDawn.CozyBuilder Assembly: ProjectDawn.CozyBuilder.dll Syntax public interface ICozyHashable Methods CalculateHash() Declaration uint CalculateHash() Returns Type Description uint"
  },
  "api/ProjectDawn.CozyBuilder.ICozySegmentsModifier.html": {
    "href": "api/ProjectDawn.CozyBuilder.ICozySegmentsModifier.html",
    "title": "Interface ICozySegmentsModifier",
    "keywords": "Interface ICozySegmentsModifier Inherited Members ICozyHashable.CalculateHash() Namespace: ProjectDawn.CozyBuilder Assembly: ProjectDawn.CozyBuilder.dll Syntax public interface ICozySegmentsModifier : ICozyHashable Methods Modify(ref CozyBuilderContext, NativeList<Segment>, CozySpline) Declaration void Modify(ref CozyBuilderContext context, NativeList<Segment> segments, CozySpline spline) Parameters Type Name Description CozyBuilderContext context NativeList<Segment> segments CozySpline spline"
  },
  "api/ProjectDawn.CozyBuilder.ListExtension.html": {
    "href": "api/ProjectDawn.CozyBuilder.ListExtension.html",
    "title": "Class ListExtension",
    "keywords": "Class ListExtension Inheritance object ListExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.CozyBuilder Assembly: ProjectDawn.CozyBuilder.dll Syntax public static class ListExtension Methods IsNull<T>(List<T>) Declaration public static bool IsNull<T>(this List<T> value) where T : Object Parameters Type Name Description List<T> value Returns Type Description bool Type Parameters Name Description T"
  },
  "api/ProjectDawn.CozyBuilder.MinMaxRangeAttribute.html": {
    "href": "api/ProjectDawn.CozyBuilder.MinMaxRangeAttribute.html",
    "title": "Class MinMaxRangeAttribute",
    "keywords": "Class MinMaxRangeAttribute Inheritance object Attribute PropertyAttribute MinMaxRangeAttribute Inherited Members PropertyAttribute.order Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.CozyBuilder Assembly: ProjectDawn.CozyBuilder.dll Syntax [AttributeUsage(AttributeTargets.Field, AllowMultiple = false)] public class MinMaxRangeAttribute : PropertyAttribute Constructors MinMaxRangeAttribute(float, float) Declaration public MinMaxRangeAttribute(float min, float max) Parameters Type Name Description float min float max Fields Max Declaration public float Max Field Value Type Description float Min Declaration public float Min Field Value Type Description float"
  },
  "api/ProjectDawn.CozyBuilder.Placement.html": {
    "href": "api/ProjectDawn.CozyBuilder.Placement.html",
    "title": "Enum Placement",
    "keywords": "Enum Placement Namespace: ProjectDawn.CozyBuilder Assembly: ProjectDawn.CozyBuilder.dll Syntax public enum Placement Fields Name Description Center Edge"
  },
  "api/ProjectDawn.CozyBuilder.Range.html": {
    "href": "api/ProjectDawn.CozyBuilder.Range.html",
    "title": "Struct Range",
    "keywords": "Struct Range Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.CozyBuilder Assembly: ProjectDawn.CozyBuilder.dll Syntax [Serializable] public struct Range Constructors Range(float, float) Declaration public Range(float start, float end) Parameters Type Name Description float start float end Fields End Declaration public float End Field Value Type Description float Start Declaration public float Start Field Value Type Description float Properties Length Declaration public float Length { get; } Property Value Type Description float Methods Contains(float) Declaration public bool Contains(float value) Parameters Type Name Description float value Returns Type Description bool"
  },
  "api/ProjectDawn.CozyBuilder.RangeExt.html": {
    "href": "api/ProjectDawn.CozyBuilder.RangeExt.html",
    "title": "Class RangeExt",
    "keywords": "Class RangeExt Inheritance object RangeExt Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.CozyBuilder Assembly: ProjectDawn.CozyBuilder.dll Syntax public static class RangeExt Methods NextFloat(ref Random, Range) Declaration public static float NextFloat(this ref Random random, Range range) Parameters Type Name Description Random random Range range Returns Type Description float"
  },
  "api/ProjectDawn.CozyBuilder.Scaling.html": {
    "href": "api/ProjectDawn.CozyBuilder.Scaling.html",
    "title": "Enum Scaling",
    "keywords": "Enum Scaling Namespace: ProjectDawn.CozyBuilder Assembly: ProjectDawn.CozyBuilder.dll Syntax public enum Scaling Fields Name Description None Stretch"
  },
  "api/ProjectDawn.CozyBuilder.Segment.html": {
    "href": "api/ProjectDawn.CozyBuilder.Segment.html",
    "title": "Struct Segment",
    "keywords": "Struct Segment Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.CozyBuilder Assembly: ProjectDawn.CozyBuilder.dll Syntax public struct Segment Fields Depth Declaration public float Depth Field Value Type Description float Index Declaration public int Index Field Value Type Description int Width Declaration public float Width Field Value Type Description float X Declaration public float X Field Value Type Description float Z Declaration public float Z Field Value Type Description float"
  },
  "api/ProjectDawn.CozyBuilder.SplineTopology.html": {
    "href": "api/ProjectDawn.CozyBuilder.SplineTopology.html",
    "title": "Enum SplineTopology",
    "keywords": "Enum SplineTopology Namespace: ProjectDawn.CozyBuilder Assembly: ProjectDawn.CozyBuilder.dll Syntax public enum SplineTopology Fields Name Description CutmulRowStrip LineStrip"
  },
  "api/ProjectDawn.CozyBuilder.html": {
    "href": "api/ProjectDawn.CozyBuilder.html",
    "title": "Namespace ProjectDawn.CozyBuilder",
    "keywords": "Namespace ProjectDawn.CozyBuilder Classes CozyArtifact CozyAttachment CozyCrenelles CozyCut CozyDoubleLapTilling Rearranges cell widths to create a brick-like pattern and occasionally splits bricks. CozyDraw CozyGrid CozyMask CozyPlane CozyPoint CozyQuoin CozyRenderer CozyRunningBond CozySegments CozySpline CozyStringCourses GameObjectExt ListExtension MinMaxRangeAttribute RangeExt Structs Cell CozyBuilderContext CozyRenderNode CozyRenderNodeBatchComparer GameObjectExt.ComponentScope<T> HashBuffer Range Segment Interfaces ICozyBuilder ICozyGridModifier ICozyHashable ICozySegmentsModifier Enums BondOrentation CozyBuildMode CozyRenderMode Placement Scaling SplineTopology"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Welcome to the Scripting Reference!",
    "keywords": "Welcome to the Scripting Reference! Select the API to view the detail."
  },
  "changelog.html": {
    "href": "changelog.html",
    "title": "Changelog",
    "keywords": "Changelog All notable changes to this package will be documented in this file. The format is based on Keep a Changelog [0.5.0] - 2024-12-06 Package released"
  },
  "index.html": {
    "href": "index.html",
    "title": "Cozy Builder",
    "keywords": "Cozy Builder This package provides a lightweight solution for procedurally generating buildings. It is heavily inspired by Tiny Glade, featuring similar functionality and art style. Cozy Builder is designed as a tool for cozy builder games or a convenient solution for creating pre-baked buildings."
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "Cozy Builder",
    "keywords": "Cozy Builder This package provides a lightweight solution for procedurally generating buildings. It is heavily inspired by Tiny Glade, featuring similar functionality and art style. Cozy Builder is designed as a tool for cozy builder games or a convenient solution for creating pre-baked buildings. Important This package is currently in a preview state. Expect some rough edges and additional features in future updates. :) Quick Start For a minimal setup, refer to the tutorial: My First Wall. Dependencies Minimum Unity Version: 2022.3 Required Packages: com.unity.mathematics com.unity.collections com.unity.burst Support If you have any questions, encounter bugs, or have feature requests, join us on Discord."
  },
  "manual/known-issues.html": {
    "href": "manual/known-issues.html",
    "title": "Known Issues",
    "keywords": "Known Issues Most components do not work well with non-rectangular planes (e.g., Cut, Quoin). Quoin tiles currently shrink during cutting."
  },
  "manual/samples.html": {
    "href": "manual/samples.html",
    "title": "Samples",
    "keywords": "Samples The Samples folder in the package contains projects that showcase possible use cases. Samples in this package are located in a hidden folder named Samples~ and can be imported using the Package Manager. This setup keeps the package lightweight when samples are not needed. To import samples, follow these steps: Open the Package Manager by clicking the menu item Window > Package Manager. Ensure the tab Packages: In Project is selected. Locate the package Agents Navigation. Click the Samples button and import the desired samples. Note Make sure the tab Packages: In Project is selected. For more information, see the Unity documentation: Samples in Custom Packages. Cozy Village This sample contains a small, stylized medieval village environment. My First Wall This sample includes the finished scene from the tutorial: My First Wall. My First Roof This sample contains the finished scene from the tutorial: My First Roof."
  },
  "manual/tutorials.html": {
    "href": "manual/tutorials.html",
    "title": "Tutorials",
    "keywords": "Tutorials This sections will contain some common tutorial requested by the users."
  },
  "manual/tutorials/custom-builder.html": {
    "href": "manual/tutorials/custom-builder.html",
    "title": "Custom Builder",
    "keywords": "Custom Builder The building process in this package is centered around components that implement the ICozyBuilder interface. To create your own builder, write a custom MonoBehaviour that implements the ICozyBuilder interface. This guide covers each required method and its implementation. CalculateHash The ICozyBuilder interface requires implementing another interface, ICozyHashable. This interface contains a single method: uint CalculateHash(); This method is used to detect changes in a component during the building process. Each component's hash is checked, and if the hash has changed, the component is rebuilt. Example: Single Field If your component has a single field, you can return its hash code directly: public uint CalculateHash() { return MyField.GetHashCode(); } Example: Multiple Fields If your component has multiple fields, you can use the HashBuffer structure: public uint CalculateHash() { HashBuffer hash = new HashBuffer(); hash.Write(MyField0); hash.Write(MyField1); return hash.GetHash(); } Build The Build method must also be implemented: void Build(ref CozyBuilderContext context); This method is responsible for generating persistent render nodes, which are eventually translated into render calls. Render nodes can be created using the Instantiate method from the CozyBuilderContext. Tip For examples, refer to the classes CozyGrid, CozySegments, and CozyAttachment. Gird Modifier The CozyGrid builder provides an API for modifying its results. As the grid primarily produces an array of cells, there is an interface called ICozyGridModifier that allows for reading and writing this array. To create a grid modifier: Create a custom MonoBehaviour that implements the ICozyGridModifier interface. Attach it to the same GameObject that contains the CozyGrid component. Implement the following method: void Modify(ref CozyBuilderContext context, NativeList<Cell> cells, CozyPlane plane); Tip For examples, refer to the classes CozyDraw and CozyDoubleLapTiling."
  },
  "manual/tutorials/my-first-roof.html": {
    "href": "manual/tutorials/my-first-roof.html",
    "title": "My First Roof",
    "keywords": "My First Roof This tutorial explains how to set up components for procedurally generating a roof. To avoid duplicating steps from the previous tutorial My First Wall, this tutorial omits details about geometry setup. For the completed tutorial, refer to the scene My First Roof in Samples. Geometry Setup First, set up the geometry by constructing roof-like lines. Next, add planes. Important Ensure that plane gizmos are rendering correctly so you can verify the planes are facing the right direction. To invert a plane's direction, select the Cozy Plane and use the Invert button in the Cozy Toolbar. Tiles Now we move to the exciting part—generating tiles from the planes. Create a new GameObject with the Cozy Grid component and make it a child of your Plane GameObject. Add the following components: Cozy Grid Cozy Double Lap Tiling Cozy Draw For the Cozy Draw component: Enable Global Rotation. Set Cell Size to 0.2, 0.16, 0.2. Once set up, duplicate this tile GameObject for all four planes. Corners Tile intersections at corners often do not look clean. To fix this, you can create specialized tiling for corners. Select the Cozy Spline for the corner. Create a new GameObject with the Cozy Segments component and make it a child of the Spline GameObject. Add the Cozy Draw component to the new GameObject. Select the prefab from Models/Roof/Tile Corner and set Cell Size to 0.2, 0.77, 0.7."
  },
  "manual/tutorials/my-first-wall.html": {
    "href": "manual/tutorials/my-first-wall.html",
    "title": "My First Wall",
    "keywords": "My First Wall This tutorial explains how to set up components for procedurally generating a brick wall. For the finished tutorial, check the scene My First Wall in Samples. Setup Before starting the tutorial, it is recommended to open the Cozy Tools overlay toolbar. You can open it by pressing the ` key and selecting Cozy Tools. Note For more information about the overlay toolbar, refer to the Unity Overlay Toolbar documentation. Geometry Cozy Renderer First, you will need to create a Cozy Renderer. This component is responsible for managing geometry and procedurally generating draw calls. It functions similarly to Unity's Canvas component, where a Canvas contains UI elements in its hierarchy, and a Cozy Renderer contains points, splines, planes, and other builders. To create a Cozy Renderer, use the menu item or right-click in the Hierarchy view: Cozy Builder > Renderer. Cozy Point Next, create a Cozy Point, a GameObject with the Cozy Point component. This acts as a control point for splines. Using the Cozy Tools toolbar, click the Create Point button to generate a point. Create four points to form a spline in the next step. Note Points created via Cozy Tools are automatically parented to the currently selected GameObject. Select your Cozy Renderer before clicking Create Point. Cozy Spline To generate a Spline, select the points and use the Cozy Tools toolbar, clicking the Create Spline button. Cozy Plane Before creating a Plane, you'll need an additional spline. Duplicate the existing spline and points (Ctrl + D) and move them slightly upward. Now, create a Plane using the Cozy Tools toolbar. Select both splines and click the Create Plane button. Note The order of selected splines matters when creating a Plane. Select the lower spline first for consistency with other prefabs. Bricks This section explains how to generate tiles for your plane. First, create a new GameObject with the Cozy Grid component and make it a child of the Plane GameObject. The Cozy Grid splits the plane into an array of cells. However, it does not produce draw calls on its own—you'll need modifiers for visualization. Note While the same GameObject can contain both Cozy Plane and Cozy Grid, using separate GameObjects helps separate procedural generation logic from geometry and simplifies copying/pasting properties. Modifiers Modifiers enhance the Cozy Grid by manipulating cells and creating visual output. Important Modifiers are applied in the order they appear on the GameObject. Ensure Cozy Draw is the last component, with other modifiers listed before it. Cozy Draw Cozy Draw generates draw calls for each cell. For prefabs, use Models/Brick/Brick, which includes four variations. Running Bond Running Bond rearranges cell widths to create a brick-like pattern and occasionally splits bricks. Quoin Quoin adds bricks at the corners of the plane. String Courses Adds additional rows of quads at specific repeated heights. This detail was historically used to indicate flooring levels in walls. Crenelles Removes bricks at specific rows in a fixed pattern to create a medieval defensive wall look. Cut and Mask Allows you to cut into the wall for features like doors and windows. To set this up: Add a Cozy Cut component to the Cozy Grid GameObject. Add a Cozy Mask component to sibling GameObjects."
  }
}